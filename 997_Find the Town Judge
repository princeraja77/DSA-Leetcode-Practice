// 997. Find the Town Judge
/*

In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. If a trust relationship does not exist in trust array, then such a trust relationship does not exist.

Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.

*/

class Solution {
    public int findJudge(int n, int[][] trust) {
        int [][]trustMap=new int[n+1][2];// it contains the number of people nth person is trusting  at 0th idx 
        //and 1st index how many people trust nth person.
        for(int i=0;i<trust.length;i++){
            trustMap[trust[i][0]][0]++;
            trustMap[trust[i][1]][1]++;
        }
        for(int i=1;i<=n;i++){
            // System.out.print(trustMap[i][0]+" "+trustMap[i][1]+"     ");
            if(trustMap[i][0]==0&&trustMap[i][1]==n-1){
                return i;
            }
        }
        return -1;
    }
}

// solution in CPP

class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        int trustmap[n+1][2];
        for(int i=0;i<=n;i++){
            trustmap[i][0]=0;
            trustmap[i][1]=0;
        }
        for(int i=0;i<trust.size();i++){
            trustmap[trust.at(i).at(0)][0]++;
            trustmap[trust.at(i).at(1)][1]++;
        }
        for(int i=1;i<=n;i++){
            if(trustmap[i][0]==0&&trustmap[i][1]==n-1){
                return i;
            }
        }
        return -1;
    }
};

